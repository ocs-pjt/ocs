require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe UseCasesController do

  before (:each) do
    @user = FactoryGirl.create(:user)
    @use_case = FactoryGirl.create(:use_case, user: @user)
    sign_in @user
  end

  # This should return the minimal set of attributes required to create a valid
  # UseCase. As you add validations to UseCase, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "key" => "abc", user: @user } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UseCasesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all use_cases as @use_cases" do
      get :index, {}, valid_session
      assigns(:use_cases).should eq([@use_case])
    end
  end

  describe "POST get_key" do 
    it "returns an error message if the collector name doesn't exist" do 
      post :get_key, {collector_name: "C+++", collector_version: "1.0.0"}, { 'CONTENT_TYPE' => 'application/json', 'ACCEPT' => 'application/json' }
      expect(response.body).to eql "{\"response\":\"Invalid collector name and/or version\"}"
      expect(response.response_code).to be 200 
    end

    it "returns an error if the collector version is incorrect" do 
      post :get_key, {collector_name: @use_case.collector.name, collector_version: "1.1.1"}, { 'CONTENT_TYPE' => 'application/json', 'ACCEPT' => 'application/json' }
      expect(response.body).to eql "{\"response\":\"Invalid collector name and/or version\"}"
      expect(response.response_code).to be 200 
    end

    it 'returns a message with the key in it' do 
      post :get_key, {collector_name: @use_case.collector.name, collector_version: @use_case.collector_version.version, program_name: @use_case.program.name}, { 'CONTENT_TYPE' => 'application/json', 'ACCEPT' => 'application/json' }
      expect(response.body).to eql "{\"response\":\"#{@use_case.key}\"}"
      expect(response.response_code).to be 200 
    end
  end

  describe "POST get_key_from_form" do 
    it "returns an error if the collector doesn't exist" do
      xhr :post, :get_key_from_form, {collector_id: nil, program_id: @use_case.program.id}
      expect(response.body).to eql "{\"response\":\"Invalid collector and/or version\"}"
      expect(response.response_code).to be 200 
    end

    it 'returns a message with the key in it' do 
      xhr :post, :get_key_from_form, {collector_id: @use_case.collector.id, collector_version_id: @use_case.collector_version.id, program_id: @use_case.program.id}
      expect(response.body).to eql "{\"response\":\"#{@use_case.key}\"}"
      expect(response.response_code).to be 200 
    end
  end
end
